# HOCON (Human-Optimized Config Object Notation) syntax. For details refer to:
# https://github.com/typesafehub/config/blob/master/HOCON.md
# Refer to SystemProperties class documentation regarding
# configuration sources and their merge order

# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
peer.discovery = {

    # if peer discovery is off
    # the peer window will show
    # only what retrieved by active
    # peer [true/false]
    enabled = true

    # number of workers that
    # tastes the peers for being
    # online [1..10]
    workers = 3

    # List of the peers to start
    # the search of the online peers
    # values: [ip:port, ip:port, ip:port ...]
    ip.list = [
        "poc-7.ethdev.com:30303",
        "185.43.109.23:30303"
    ]
}

peer {
    # Boot node list
    active = [
        {
            nodeName = "heiko peer"
            ip = 188.106.121.253
            port = 30303
            nodeId = 53f162c2e005aa04a763710c18e18a0042f4c46e2197162989161383c10d4e7b3cdcaeebf3c7f5336416a2c0a9787fb59365fde9313276b88703c8ada2f4e8d2
        },
        {
            # my poc-9-peer-1
            ip = 45.55.204.106
            port = 30303
            nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
        },
        {
            # victor peer
            url = "enode://4e94cab3e9a85a22b59f69a2ad1f10ff1eaff5f8d94a0025df18c936a687b6ac99b3fb655677e8b9d08087319bca69ad2ab0b80a9d0ab47296bdc54c8cb09853@77.96.249.59:30300"
        }
    ]

    # The protocols supported by peer
    capabilities = [eth, shh, bzz]

    # Peer for server to listen for incoming
    # connections
    listen.port = 30303

    # connection timeout for trying to
    # connect to a peer [seconds]
    connection.timeout = 2

    # the parameter specifies how much
    # time we will wait for a message
    # to come before closing the channel
    channel.read.timeout = 30

    # Private key of the peer
    privateKey = 794ef087680e2494fa4918fd8fb80fb284b50b57d321a31423fe42b9ccf6216047cea0b66fe8365a8e3f2a8140c6866cc45852e63124668bee1daa9c97da0c2a

    # Network id
    networkId = 0
}


# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 15

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

database {
    # place to save physical storage files
    dir = database

    # everytime the application starts
    # the existing database will be
    # destroyed and all the data will be
    # downloaded from peers again
    reset = false
}

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey

dump {
    # for testing purposes
    # all the state will be dumped
    # in JSON form to [dump.dir]
    # if [dump.full] = true
    # possible values [true/false]
    full = false
    dir = dmp

    # This defines the vmtrace dump
    # to the console and the style
    # -1 for no block trace
    # styles: [pretty/standard+] (default: standard+)
    block = -1
    style = pretty

    # clean the dump dir each start
    clean.on.restart = true
}

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
}

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# maximum blocks hashes to ask.
# sending GET_BLOCK_HASHES msg
# we specify number of block we want
# to get, recomendec value [1..1000]
# Default: unlimited
max.hashes.ask = 10000

# maximum blocks to ask,
# when downloading the chain
# sequenteally sending GET_BLOCKS msg
# we specify number of blocks we want
# to get, recomendec value [1..120]
max.blocks.ask = 500


# the network layer will ask for
# more and more blocks independently
# from how much of them been executed
# how much block we will keep in buffer
# until the execution is set by this param
# recommended value: [100.300]
max.blocks.queued = 300000

# project version auto copied during build phase
project.version = 0.9.5

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for a debug purpose
# so if you don't know exactly how
# to apply it leave to be [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# Key value data source values: [leveldb/redis/mapdb]
keyvalue.datasource = leveldb

# Redis cloud enabled flag.
# Allows using RedisConnection for creating cloud based data structures.
redis.enabled=false

record.blocks=false
blockchain.only=false

# Load the blocks
# from a rlp lines
# file and not for
# the net
#blocks.loader=E:\\temp\\_poc-9-blocks\\poc-9-st-530k.dmp
#blocks.loader=/temp/poc-9-780k.dmp
blocks.loader=""

flush.blocks.batch.size=10000
flush.blocks.repo.size=256000000
flush.blocks.ignore.consensus=false
details.inmemory.storage.limit=1000